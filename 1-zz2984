import Rhino.Geometry as rh

d_1 = srf.Domain(0)
d_2 = srf.Domain(1)

print(d_1.Min, d_1.Max)
print(d_2.Min, d_2.Max)

u_spacing = (d_1.Max - d_1.Min) / u_num
v_spacing = (d_2.Max - d_2.Min) / v_num

print u_spacing, v_spacing

pts = []

for u in range(u_num + 1):
    pts.append([]) ## for each row, we  first add an empty list
    for v in range(int(v_num + 1)):
        pt = srf.PointAt(u * u_spacing, v * v_spacing)
        pts[-1].append(pt) ## after creating a new point we add it to the last list (representing the current row)

panels = []
polys = []
###   make a list of corner pts
pt_corner = []
dist_list = []
#   enumerate: pair each item with index  list = [A,B,C] print(enumerate(list))---(0,A) (1,B) (2,C)
for i, row in enumerate(pts[:-1]):
#   every item but the last 
#   enumerate:because the output is (i,num) 
    for j, pt_1 in enumerate(row[:-1]):
        
        polys.append({})
        panel = {}

#       be defined as distionary
 
#       panels.append({})
        
        pt_2 = row[j+1]
        next_row = pts[i+1]
        pt_3 = next_row[j+1]
        pt_4 = next_row[j]
#       point are ordered in a polyline way / rectangle direction
        
        poly = rh.PolylineCurve([pt_1,pt_2,pt_3,pt_4,pt_1])
#       count the last pts in a polyline 
        polys [-1] ["original"] = poly 
        
        pl_1= rh.Plane (pt_2, pt_3, pt_4)
        t_1 = rh.Transform.PlanarProjection(pl_1)
        pt_1t = rh.Point3d (pt_1)
        pt_1t.Transform(t_1)
        
        pl_2= rh.Plane (pt_1, pt_3, pt_4)
        t_2 = rh.Transform.PlanarProjection(pl_2)
        pt_2t = rh.Point3d (pt_2)
        pt_2t.Transform(t_2)
        
        pl_3= rh.Plane (pt_1, pt_2, pt_4)
        t_3 = rh.Transform.PlanarProjection(pl_3)
        pt_3t = rh.Point3d (pt_3)
        pt_3t.Transform(t_3)
        
        
        pl_4= rh.Plane (pt_1, pt_2, pt_3)
        t_4 = rh.Transform.PlanarProjection(pl_4)
        pt_4t = rh.Point3d (pt_4)
        pt_4t.Transform(t_4)

        polys[-1]["edge"] = []
#        panel["original_boundary"] = poly


#       higher the degree is of the surface, more impact a pt will have on surroundings
#       smoother the surface can get


        ## CHALLENGE 1: here we always move the same point (pt_3). To solve this challenge, make a loop that iterates over every options of
        ## corner point and tests how far each needs to move to be planar with the other three points. Then after the loops has run,
        ## create the boundary polyline using the case with the least distance
###### Attempt 1 
#        pt_corner.append(pt_2)
#        pt_corner.append(pt_3)
#        pt_corner.append(pt_4)
####     add every possible pts_3 into this list
#        for pts_corner in pt_corner:
##            print(pts_corner) 
#            pt_5 = rh.Point3d(pts_corner)         
#            dist = rh.Point3d.DistanceTo(pt_5,pts_corner)
#            dist_list.append(dist)
#        for i in dist_list:
#            if dist_list[i].round(2)< dist_list[i+1].round(2):
##               error here, don't know why... 
#                dist_min = dist_list[i]
#        print(dist_min)

###### Attempt 2 

        if ((pt_1.DistanceTo (pt_1t) < pt_2.DistanceTo (pt_2t)) and (pt_1.DistanceTo (pt_1t) < pt_3.DistanceTo (pt_3t)) and
(pt_1.DistanceTo (pt_1t) < pt_4.DistanceTo (pt_4t))): # 1 smallest
            line = rh.Line(pl_1.ClosestPoint(pt_1), pl_1.Normal)
            point = line.PointAt(rh.Intersect.Intersection.LinePlane(line, pl_1) [1])
            planar_poly = rh.PolylineCurve([point, pt_2, pt_3, pt_4, point])
            if pt_1.DistanceTo(pt_1t) > 0.01:
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_2, pt_1t, pt_1, pt_2]))
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_4, pt_1, pt_1t, pt_4]))
                
        elif ((pt_2.DistanceTo(pt_2t) < pt_1.DistanceTo (pt_1t)) and (pt_2.DistanceTo (pt_2t) < pt_3.DistanceTo (pt_3t)) and
(pt_2.DistanceTo (pt_2t) < pt_4.DistanceTo (pt_4t))) : # 2 smallest
            line = rh.Line(pl_2.ClosestPoint(pt_2), pl_2.Normal)
            point = line.PointAt(rh.Intersect.Intersection.LinePlane(line, pl_2) [1])
            planar_poly = rh.PolylineCurve([pt_1, point,pt_3, pt_4, pt_1])
            if pt_2.DistanceTo(pt_2t) > 0.01:
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_1, pt_2t, pt_2, pt_1]))
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_3, pt_2, pt_2t, pt_3]))
                
        elif ((pt_3.DistanceTo(pt_3t) < pt_2.DistanceTo (pt_2t)) and (pt_3.DistanceTo (pt_3t) < pt_1.DistanceTo (pt_1t)) and
(pt_3.DistanceTo (pt_3t) < pt_4.DistanceTo (pt_4t))) : # 3 smallest
            line = rh.Line(pl_3.ClosestPoint(pt_3), pl_3.Normal)
            point = line.PointAt(rh.Intersect.Intersection.LinePlane(line, pl_3) [1])
            planar_poly = rh.PolylineCurve([pt_1, pt_2,point, pt_4, pt_1])
            if pt_3.DistanceTo(pt_3t) > 0.01:
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_2, pt_3t, pt_3, pt_2]))
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_4, pt_3, pt_3t, pt_4])) 
                
        elif ((pt_4.DistanceTo(pt_4t) < pt_2.DistanceTo (pt_2t)) and (pt_4.DistanceTo (pt_4t) < pt_1.DistanceTo (pt_1t)) and
(pt_4.DistanceTo (pt_4t) < pt_3.DistanceTo (pt_3t))) : # 4 smallest
            line = rh.Line(pl_4.ClosestPoint(pt_4), pl_4.Normal)
            point = line.PointAt(rh.Intersect.Intersection.LinePlane(line, pl_4) [1])
            planar_poly = rh.PolylineCurve([pt_1, pt_2,pt_3, point, pt_1])
            if pt_4.DistanceTo(pt_4t) > 0.01:
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_3, pt_4t, pt_4, pt_3]))
                polys[-1] ["edge"].append (rh.PolylineCurve([pt_1, pt_4, pt_4t, pt_1]))    




        polys [-1] ["planar"] = planar_poly ## store planar poly with a different key
        
original = [poly["original"] for poly in polys]
planar = [poly["planar"] for poly in polys]
edge = [poly["edge"] for poly in polys]







        
        
##        pl = rh.Plane(pt_1,pt_2,pt_4)
##        
#        t = rh.Transform.PlanarProjection(pl)
#        
##        pt_5 = rh.Point3d(pt_3)
#        
#        pt_5.Transform(t)
#        
#        projected_poly = rh.PolylineCurve([pt_1,pt_2,pt_5,pt_4,rh.Point3d(pt_1)])
#        
#        panel["projected_boundary"] = projected_poly
#        
#        panels.append(panel)
#        
#
#
#for panel in panels:
#    print panel
#    poly = panel["projected_boundary"]
#    polys.append(poly)


